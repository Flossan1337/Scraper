name: Scrape

on:
  workflow_dispatch: {} # Manuell "Run workflow"-knapp
  schedule:
    - cron: '0 3 * * *' # Dagligen 03:00 CEST (03:00 UTC)

permissions:
  contents: write # krÃ¤vs fÃ¶r git push med GITHUB_TOKEN

jobs:
  run-scripts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # underlÃ¤ttar rebase innan push

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Playwright browsers
        run: python -m playwright install

      # KÃ¶r varje script i eget steg, fortsÃ¤tt Ã¤ven om ett misslyckas
      - name: Run fetch_kpi.py
        run: python ./scripts/fetch_kpi.py
        timeout-minutes: 10
        continue-on-error: true

      - name: Run amazon_scape_bought_playwright_us_de.py
        run: python ./scripts/amazon_scape_bought_playwright_us_de.py
        timeout-minutes: 10
        continue-on-error: true

      - name: Run track_combined_prices.py
        run: python ./scripts/track_combined_prices.py
        timeout-minutes: 10
        continue-on-error: true

      - name: Run track_fractal_rankings_playwright.py
        run: python ./scripts/track_fractal_rankings_playwright.py
        timeout-minutes: 10
        continue-on-error: true

      - name: Run track_nelly_aov.py
        run: python ./scripts/track_nelly_aov.py
        timeout-minutes: 10
        continue-on-error: true

      - name: Run track_rugvista_bestsellers.py
        run: python ./scripts/track_rugvista_bestsellers.py
        timeout-minutes: 10
        continue-on-error: true

      - name: Run track_rugvista_daily_sales.py
        run: python ./scripts/track_rugvista_daily_sales.py
        timeout-minutes: 10
        continue-on-error: true

      - name: Commit & push generated data (if any)
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          BRANCH="${{ github.ref_name }}"

          # LÃ¤gg bara till data-katalogen och scripts/html_dumps i repo-roten
          git add -A data scripts/html_dumps || true

          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "chore(data): update scraped XLSX [skip ci]"

          git pull --rebase origin "$BRANCH" || true

          git push origin "$BRANCH"

      - name: Upload data artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: data-outputs
          path: |
            data/**
            Scripts/data/**

      - name: Install jq
        if: always()
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate job summary table
        if: always()
        run: |
          set -euo pipefail
          SUMMARY="$GITHUB_STEP_SUMMARY"
          echo "## ðŸ“Š Daily Scraper Summary" >> "$SUMMARY"
          echo "" >> "$SUMMARY"
          echo "| Script | Description | Status | Metrics |" >> "$SUMMARY"
          echo "|:--|:--|:--|:--|" >> "$SUMMARY"

          # List of scripts and descriptions (update if you add/remove scripts)
          declare -A DESCR
          DESCR[fetch_kpi.py]="Fetches Adtraction EPC and KPI data"
          DESCR[amazon_scape_bought_playwright_us_de.py]="Tracks Amazon 'bought together' for Scape"
          DESCR[track_combined_prices.py]="Combines Inet & Amazon price data"
          DESCR[track_fractal_rankings_playwright.py]="Fetches Fractal product rankings"
          DESCR[track_nelly_aov.py]="Fetches Nelly AOV & top list data"
          DESCR[track_rugvista_bestsellers.py]="Fetches Rugvista top list rankings"
          DESCR[track_rugvista_daily_sales.py]="Tracks Rugvista daily sales delta"

          METRICS_DIR="scripts/metrics"
          mkdir -p "$METRICS_DIR"

          for script in "fetch_kpi.py" "amazon_scape_bought_playwright_us_de.py" "track_combined_prices.py" \
                        "track_fractal_rankings_playwright.py" "track_nelly_aov.py" "track_rugvista_bestsellers.py" "track_rugvista_daily_sales.py"; do
            desc="${DESCR[$script]:-}" || true
            base=$(basename "$script")
            jsonfile="$METRICS_DIR/${base}.json"

            status="âœ… Completed"
            metrics_str="-"

            if [ -f "$jsonfile" ]; then
              # Read JSON and convert to key=value pairs for display
              # Expecting simple flat JSON like {"rows": 123, "median": 456.7}
              metrics_str=$(jq -r 'to_entries | map("\(.key)=\(.value)") | join(", ")' "$jsonfile" 2>/dev/null || echo "invalid json")
            else
              metrics_str="No metrics"
            fi

            printf "| %s | %s | %s | %s |\n" "$base" "$desc" "$status" "$metrics_str" >> "$SUMMARY"
          done

          echo "" >> "$SUMMARY"
          echo "ðŸ•’ Run finished at $(date -u '+%Y-%m-%d %H:%M UTC')" >> "$SUMMARY"

